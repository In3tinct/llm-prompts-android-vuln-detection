package com.example.myapplication;

import android.app.Service;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Binder;
import android.os.IBinder;
import android.os.RemoteException;
import android.util.Log;

public class ProtectedExportedService extends Service {

    private static final String TAG = "ProtectedExportedService";
  
    private final ISensitiveService.Stub mBinder = new ISensitiveService.Stub() {
        @Override
        public String getSensitiveInfo() throws RemoteException {
            final int callingUid = Binder.getCallingUid();

            try {
                String[] packages = getPackageManager().getPackagesForUid(callingUid);
                boolean signatureMatch = false;
                if (packages != null && packages.length > 0) {
                    for (String packageName : packages) {
                        PackageManager pm = getPackageManager();
                        if (pm.checkSignatures(getPackageName(), packageName) == PackageManager.SIGNATURE_MATCH) {
                            Log.d(TAG, "Caller UID " + callingUid + " from package " + packageName + " has matching signature.");
                            signatureMatch = true;
                            break;
                        } else {
                            Log.w(TAG, "Caller UID " + callingUid + " from package " + packageName + " has mismatched signature.");
                        }
                    }
                }

                if (!signatureMatch) {
                    Log.e(TAG, "Signature mismatch for UID " + callingUid + ". Access denied.");
                    throw new SecurityException("Caller does not have a matching signature.");
                }

            } catch (Exception e) {
                Log.e(TAG, "Error checking caller signature for UID " + callingUid, e);
                throw new SecurityException("Failed to verify caller identity.", e);
            }

            Log.i(TAG, "Sensitive info accessed by UID: " + callingUid);
            return "This is highly confidential data (accessed securely)!";
        }
    };

    @Override
    public IBinder onBind(Intent intent) {
        Log.d(TAG, "onBind() called. Returning IBinder.");
        return mBinder;
    }

    @Override
    public boolean onUnbind(Intent intent) {
        Log.d(TAG, "onUnbind() called.");
        return super.onUnbind(intent);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, "onDestroy() called.");
    }
}
