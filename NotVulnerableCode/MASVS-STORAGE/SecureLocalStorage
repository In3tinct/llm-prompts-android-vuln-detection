import android.content.Context;
import android.content.SharedPreferences;
import android.util.Log;
import android.widget.EditText;
import android.widget.Toast;

import androidx.security.crypto.EncryptedSharedPreferences;
import androidx.security.crypto.MasterKeys;

import java.io.IOException;
import java.security.GeneralSecurityException;

public class YourActivityOrFragment {

    private static final String TAG = "PinEncryption";
    private static final String PREF_FILE_NAME = "encrypted_pin_prefs";
    private static final String PIN_KEY = "encrypted_pin";

    private EditText editTextPin;
    private SharedPreferences encryptedSharedPreferences;

    public void setupEncryptedPinSaving(Context context, EditText pinEditText) {
        this.editTextPin = pinEditText;

        try {
            String masterKeyAlias = MasterKeys.getOrCreate(MasterKeys.AES256_GCM_SPEC);

            encryptedSharedPreferences = EncryptedSharedPreferences.create(
                    PREF_FILE_NAME,
                    masterKeyAlias,
                    context,
                    EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
                    EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
            );
            Log.d(TAG, "Encrypted SharedPreferences initialized successfully.");

        } catch (GeneralSecurityException | IOException e) {
            Log.e(TAG, "Error initializing Encrypted SharedPreferences: " + e.getMessage());
            Toast.makeText(context, "Error setting up secure storage.", Toast.LENGTH_LONG).show();
        }
    }

    public void saveUserPin(Context context) {
        if (encryptedSharedPreferences == null) {
            Log.e(TAG, "Encrypted SharedPreferences not initialized. Cannot save PIN.");
            Toast.makeText(context, "Secure storage not ready. Please try again.", Toast.LENGTH_SHORT).show();
            return;
        }

        String userPin = editTextPin.getText().toString();

        if (userPin.isEmpty()) {
            Toast.makeText(context, "PIN cannot be empty", Toast.LENGTH_SHORT).show();
            return;
        }

        SharedPreferences.Editor editor = encryptedSharedPreferences.edit();
        editor.putString(PIN_KEY, userPin);
        editor.apply();

        Log.d(TAG, "PIN saved successfully (encrypted).");
        Toast.makeText(context, "PIN saved securely!", Toast.LENGTH_SHORT).show();
    }

    public String getSavedPin() {
        if (encryptedSharedPreferences == null) {
            Log.e(TAG, "Encrypted SharedPreferences not initialized. Cannot retrieve PIN.");
            return "";
        }
        String savedPin = encryptedSharedPreferences.getString(PIN_KEY, "");
        Log.d(TAG, "PIN retrieved successfully (decrypted).");
        return savedPin;
    }
}
